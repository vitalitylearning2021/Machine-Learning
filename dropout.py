# -*- coding: utf-8 -*-
"""Dropout.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QoR1guVh32oSXcgQ3WZTIT7SXSEBMq3n
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# 1. Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the images to a [0, 1] range
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Flatten the images from 28x28 to 784-dimensional vectors
x_train = x_train.reshape((-1, 28 * 28))
x_test = x_test.reshape((-1, 28 * 28))

# One-hot encode the labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# 2. Build a simple neural network with dropout
model = models.Sequential([
    layers.Dense(512, activation='relu', input_shape=(784,)),
    layers.Dropout(0.2),  # Dropout layer with 20% dropout rate
    layers.Dense(512, activation='relu'),
    layers.Dropout(0.2),  # Dropout layer with 20% dropout rate
    layers.Dense(10, activation='softmax')
])

# 3. Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 4. Train the model
model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2)

# 5. Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test accuracy: {test_acc}')