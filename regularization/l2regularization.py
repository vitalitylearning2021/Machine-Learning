# -*- coding: utf-8 -*-
"""l2Regularization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qDl9L8HhaVuJ1bM7Oe4Dr-eTQgOkCtNk
"""

import tensorflow as tf
from tensorflow.keras import layers, models, regularizers
from tensorflow.keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

# Load MNIST data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Flatten the images from 28x28 to 784
x_train = x_train.reshape(-1, 784)
x_test = x_test.reshape(-1, 784)

# Function to build a model with a given regularization
def build_model(regularizer=None):
    model = models.Sequential([
        layers.Dense(128, activation='relu', input_shape=(784,),
                     kernel_regularizer=regularizer),
        layers.Dense(64, activation='relu',
                     kernel_regularizer=regularizer),
        layers.Dense(10, activation='softmax')
    ])
    return model

# Compile and train a model with a given regularization
def compile_and_train(regularizer, regularizer_name):
    model = build_model(regularizer)
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    history = model.fit(x_train, y_train, epochs=10, batch_size=128,
                        validation_data=(x_test, y_test), verbose=2)
    test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
    print(f"\n{regularizer_name} Regularization - Test accuracy: {test_acc:.4f}")
    return model

# Plot histograms of the weights
def plot_weight_histograms(model, title):
    weights = np.concatenate([np.abs(w.flatten()) for w in model.get_weights()])
    plt.hist(weights, bins=50, color='blue', alpha=0.7)
    plt.title(title)
    plt.xlabel('Weight Value')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

# Train and evaluate models with L2 regularization and without any regularization
print("Training with No Regularization...")
model_no_reg = compile_and_train(None, "No")

print("\nTraining with L2 Regularization...")
model_l2 = compile_and_train(regularizers.l2(0.001), "L2")

# Plot the histograms of weights
plot_weight_histograms(model_no_reg, 'Histogram of Weights with No Regularization')
plot_weight_histograms(model_l2, 'Histogram of Weights with L2 Regularization')
